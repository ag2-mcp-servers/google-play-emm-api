# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:48:47+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Administrator(BaseModel):
    email: Optional[str] = Field(None, description="The admin's email address.")


class AdministratorWebToken(BaseModel):
    token: Optional[str] = Field(
        None,
        description='An opaque token to be passed to the Play front-end to generate an iframe.',
    )


class PermissionEnum(Enum):
    unknown = 'unknown'
    approveApps = 'approveApps'
    manageMcm = 'manageMcm'


class AdministratorWebTokenSpecManagedConfigurations(BaseModel):
    enabled: Optional[bool_aliased] = Field(
        None,
        description='Whether the Managed Configuration page is displayed. Default is true.',
    )


class AdministratorWebTokenSpecPlaySearch(BaseModel):
    approveApps: Optional[bool_aliased] = Field(
        None,
        description='Allow access to the iframe in approve mode. Default is false.',
    )
    enabled: Optional[bool_aliased] = Field(
        None,
        description='Whether the managed Play Search apps page is displayed. Default is true.',
    )


class AdministratorWebTokenSpecPrivateApps(BaseModel):
    enabled: Optional[bool_aliased] = Field(
        None, description='Whether the Private Apps page is displayed. Default is true.'
    )


class AdministratorWebTokenSpecStoreBuilder(BaseModel):
    enabled: Optional[bool_aliased] = Field(
        None,
        description='Whether the Organize apps page is displayed. Default is true.',
    )


class AdministratorWebTokenSpecWebApps(BaseModel):
    enabled: Optional[bool_aliased] = Field(
        None, description='Whether the Web Apps page is displayed. Default is true.'
    )


class AdministratorWebTokenSpecZeroTouch(BaseModel):
    enabled: Optional[bool_aliased] = Field(
        None,
        description='Whether zero-touch embedded UI is usable with this token. If enabled, the admin can link zero-touch customers to this enterprise.',
    )


class AppRestrictionsSchemaChangeEvent(BaseModel):
    productId: Optional[str] = Field(
        None,
        description='The id of the product (e.g. "app:com.google.android.gm") for which the app restriction schema changed. This field will always be present.',
    )


class RestrictionType(Enum):
    bool = 'bool'
    string = 'string'
    integer = 'integer'
    choice = 'choice'
    multiselect = 'multiselect'
    hidden = 'hidden'
    bundle = 'bundle'
    bundleArray = 'bundleArray'


class Type(Enum):
    bool = 'bool'
    string = 'string'
    integer = 'integer'
    choice = 'choice'
    multiselect = 'multiselect'
    hidden = 'hidden'
    bundle = 'bundle'
    bundleArray = 'bundleArray'


class AppRestrictionsSchemaRestrictionRestrictionValue(BaseModel):
    type: Optional[Type] = Field(
        None, description='The type of the value being provided.'
    )
    valueBool: Optional[bool_aliased] = Field(
        None,
        description='The boolean value - this will only be present if type is bool.',
    )
    valueInteger: Optional[int] = Field(
        None,
        description='The integer value - this will only be present if type is integer.',
    )
    valueMultiselect: Optional[List[str]] = Field(
        None,
        description='The list of string values - this will only be present if type is multiselect.',
    )
    valueString: Optional[str] = Field(
        None,
        description='The string value - this will be present for types string, choice and hidden.',
    )


class AppUpdateEvent(BaseModel):
    productId: Optional[str] = Field(
        None,
        description='The id of the product (e.g. "app:com.google.android.gm") that was updated. This field will always be present.',
    )


class Track(Enum):
    appTrackUnspecified = 'appTrackUnspecified'
    production = 'production'
    beta = 'beta'
    alpha = 'alpha'


class AppVersion(BaseModel):
    isProduction: Optional[bool_aliased] = Field(
        None, description='True if this version is a production APK.'
    )
    track: Optional[Track] = Field(None, description='Deprecated, use trackId instead.')
    trackId: Optional[List[str]] = Field(
        None,
        description="Track ids that the app version is published in. Replaces the track field (deprecated), but doesn't include the production track (see isProduction instead).",
    )
    versionCode: Optional[int] = Field(
        None, description='Unique increasing identifier for the app version.'
    )
    versionString: Optional[str] = Field(
        None,
        description='The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be "1.4").',
    )


class ApprovalUrlInfo(BaseModel):
    approvalUrl: Optional[str] = Field(
        None,
        description="A URL that displays a product's permissions and that can also be used to approve the product with the Products.approve call.",
    )


class AuthenticationToken(BaseModel):
    token: Optional[str] = Field(
        None,
        description='The authentication token to be passed to the device policy client on the device where it can be used to provision the account for which this token was generated.',
    )


class ChargingStateConstraint(Enum):
    chargingStateConstraintUnspecified = 'chargingStateConstraintUnspecified'
    chargingNotRequired = 'chargingNotRequired'
    chargingRequired = 'chargingRequired'


class DeviceIdleStateConstraint(Enum):
    deviceIdleStateConstraintUnspecified = 'deviceIdleStateConstraintUnspecified'
    deviceIdleNotRequired = 'deviceIdleNotRequired'
    deviceIdleRequired = 'deviceIdleRequired'


class NetworkTypeConstraint(Enum):
    networkTypeConstraintUnspecified = 'networkTypeConstraintUnspecified'
    anyNetwork = 'anyNetwork'
    unmeteredNetwork = 'unmeteredNetwork'


class AutoInstallConstraint(BaseModel):
    chargingStateConstraint: Optional[ChargingStateConstraint] = Field(
        None, description='Charging state constraint.'
    )
    deviceIdleStateConstraint: Optional[DeviceIdleStateConstraint] = Field(
        None, description='Device idle state constraint.'
    )
    networkTypeConstraint: Optional[NetworkTypeConstraint] = Field(
        None, description='Network type constraint.'
    )


class AutoInstallMode(Enum):
    autoInstallModeUnspecified = 'autoInstallModeUnspecified'
    doNotAutoInstall = 'doNotAutoInstall'
    autoInstallOnce = 'autoInstallOnce'
    forceAutoInstall = 'forceAutoInstall'


class AutoInstallPolicy(BaseModel):
    autoInstallConstraint: Optional[List[AutoInstallConstraint]] = Field(
        None,
        description='The constraints for auto-installing the app. You can specify a maximum of one constraint.',
    )
    autoInstallMode: Optional[AutoInstallMode] = Field(
        None,
        description='The auto-install mode. If unset defaults to "doNotAutoInstall".',
    )
    autoInstallPriority: Optional[int] = Field(
        None,
        description='The priority of the install, as an unsigned integer. A lower number means higher priority.',
    )
    minimumVersionCode: Optional[int] = Field(
        None,
        description='The minimum version of the app. If a lower version of the app is installed, then the app will be auto-updated according to the auto-install constraints, instead of waiting for the regular auto-update. You can set a minimum version code for at most 20 apps per device.',
    )


class CreateEnrollmentTokenResponse(BaseModel):
    enrollmentToken: Optional[str] = Field(None, description='Enrollment token.')


class ManagementType(Enum):
    managedDevice = 'managedDevice'
    managedProfile = 'managedProfile'
    containerApp = 'containerApp'
    unmanagedProfile = 'unmanagedProfile'


class AccountState(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class DeviceState(BaseModel):
    accountState: Optional[AccountState] = Field(
        None,
        description='The state of the Google account on the device. "enabled" indicates that the Google account on the device can be used to access Google services (including Google Play), while "disabled" means that it cannot. A new device is initially in the "disabled" state.',
    )


class EnterpriseAccount(BaseModel):
    accountEmail: Optional[str] = Field(
        None, description='The email address of the service account.'
    )


class EnterpriseAuthenticationAppLinkConfig(BaseModel):
    uri: Optional[str] = Field(None, description='An authentication url.')


class EnterprisesSendTestPushNotificationResponse(BaseModel):
    messageId: Optional[str] = Field(
        None, description='The message ID of the test push notification that was sent.'
    )
    topicName: Optional[str] = Field(
        None,
        description="The name of the Cloud Pub/Sub topic to which notifications for this enterprise's enrolled account will be sent.",
    )


class Reason(Enum):
    free = 'free'
    groupLicense = 'groupLicense'
    userPurchase = 'userPurchase'


class Entitlement(BaseModel):
    productId: Optional[str] = Field(
        None,
        description='The ID of the product that the entitlement is for. For example, "app:com.google.android.gm".',
    )
    reason: Optional[Reason] = Field(
        None,
        description='The reason for the entitlement. For example, "free" for free apps. This property is temporary: it will be replaced by the acquisition kind field of group licenses.',
    )


class EntitlementsListResponse(BaseModel):
    entitlement: Optional[List[Entitlement]] = Field(
        None,
        description='An entitlement of a user to a product (e.g. an app). For example, a free app that they have installed, or a paid app that they have been allocated a license to.',
    )


class DedicatedDevicesAllowed(Enum):
    dedicatedDevicesAllowedUnspecified = 'dedicatedDevicesAllowedUnspecified'
    disallowed = 'disallowed'
    allowed = 'allowed'


class GoogleAuthenticationRequired(Enum):
    googleAuthenticationRequiredUnspecified = 'googleAuthenticationRequiredUnspecified'
    notRequired = 'notRequired'
    required = 'required'


class GoogleAuthenticationSettings(BaseModel):
    dedicatedDevicesAllowed: Optional[DedicatedDevicesAllowed] = Field(
        None, description='Whether dedicated devices are allowed.'
    )
    googleAuthenticationRequired: Optional[GoogleAuthenticationRequired] = Field(
        None, description='Whether Google authentication is required.'
    )


class AcquisitionKind(Enum):
    free = 'free'
    bulkPurchase = 'bulkPurchase'


class Approval(Enum):
    approved = 'approved'
    unapproved = 'unapproved'


class Permissions(Enum):
    currentApproved = 'currentApproved'
    needsReapproval = 'needsReapproval'
    allCurrentAndFutureApproved = 'allCurrentAndFutureApproved'


class GroupLicense(BaseModel):
    acquisitionKind: Optional[AcquisitionKind] = Field(
        None,
        description='How this group license was acquired. "bulkPurchase" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is "free" (for free products).',
    )
    approval: Optional[Approval] = Field(
        None,
        description='Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.',
    )
    numProvisioned: Optional[int] = Field(
        None,
        description='The total number of provisioned licenses for this product. Returned by read operations, but ignored in write operations.',
    )
    numPurchased: Optional[int] = Field(
        None,
        description='The number of purchased licenses (possibly in multiple purchases). If this field is omitted, then there is no limit on the number of licenses that can be provisioned (for example, if the acquisition kind is "free").',
    )
    permissions: Optional[Permissions] = Field(
        None,
        description='The permission approval status of the product. This field is only set if the product is approved. Possible states are: - "currentApproved", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), - "needsReapproval", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, - "allCurrentAndFutureApproved", the current permissions are approved and any future permission updates will be automatically approved without administrator review. ',
    )
    productId: Optional[str] = Field(
        None,
        description='The ID of the product that the license is for. For example, "app:com.google.android.gm".',
    )


class GroupLicensesListResponse(BaseModel):
    groupLicense: Optional[List[GroupLicense]] = Field(
        None,
        description='A group license for a product approved for use in the enterprise.',
    )


class InstallState(Enum):
    installed = 'installed'
    installPending = 'installPending'


class Install(BaseModel):
    installState: Optional[InstallState] = Field(
        None,
        description='Install state. The state "installPending" means that an install request has recently been made and download to the device is in progress. The state "installed" means that the app has been installed. This field is read-only.',
    )
    productId: Optional[str] = Field(
        None,
        description='The ID of the product that the install is for. For example, "app:com.google.android.gm".',
    )
    versionCode: Optional[int] = Field(
        None,
        description='The version of the installed product. Guaranteed to be set only if the install state is "installed".',
    )


class FailureReason(Enum):
    unknown = 'unknown'
    timeout = 'timeout'


class InstallFailureEvent(BaseModel):
    deviceId: Optional[str] = Field(
        None,
        description='The Android ID of the device. This field will always be present.',
    )
    failureDetails: Optional[str] = Field(
        None, description='Additional details on the failure if applicable.'
    )
    failureReason: Optional[FailureReason] = Field(
        None,
        description='The reason for the installation failure. This field will always be present.',
    )
    productId: Optional[str] = Field(
        None,
        description='The id of the product (e.g. "app:com.google.android.gm") for which the install failure event occured. This field will always be present.',
    )
    userId: Optional[str] = Field(
        None, description='The ID of the user. This field will always be present.'
    )


class InstallsListResponse(BaseModel):
    install: Optional[List[Install]] = Field(
        None,
        description='An installation of an app for a user on a specific device. The existence of an install implies that the user must have an entitlement to the app.',
    )


class Severity(Enum):
    severityUnknown = 'severityUnknown'
    severityInfo = 'severityInfo'
    severityError = 'severityError'


class KeyedAppState(BaseModel):
    data: Optional[str] = Field(
        None,
        description='Additional field intended for machine-readable data. For example, a number or JSON object. To prevent XSS, we recommend removing any HTML from the data before displaying it.',
    )
    key: Optional[str] = Field(
        None,
        description="Key indicating what the app is providing a state for. The content of the key is set by the app's developer. To prevent XSS, we recommend removing any HTML from the key before displaying it. This field will always be present.",
    )
    message: Optional[str] = Field(
        None,
        description='Free-form, human-readable message describing the app state. For example, an error message. To prevent XSS, we recommend removing any HTML from the message before displaying it.',
    )
    severity: Optional[Severity] = Field(
        None,
        description='Severity of the app state. This field will always be present.',
    )
    stateTimestampMillis: Optional[str] = Field(
        None,
        description='Timestamp of when the app set the state in milliseconds since epoch. This field will always be present.',
    )


class LocalizedText(BaseModel):
    locale: Optional[str] = Field(
        None, description='The BCP47 tag for a locale. (e.g. "en-US", "de").'
    )
    text: Optional[str] = Field(
        None, description='The text localized in the associated locale.'
    )


class MaintenanceWindow(BaseModel):
    durationMs: Optional[str] = Field(
        None,
        description='Duration of the maintenance window, in milliseconds. The duration must be between 30 minutes and 24 hours (inclusive).',
    )
    startTimeAfterMidnightMs: Optional[str] = Field(
        None,
        description='Start time of the maintenance window, in milliseconds after midnight on the device. Windows can span midnight.',
    )


class ManagedConfigurationsSettings(BaseModel):
    lastUpdatedTimestampMillis: Optional[str] = Field(
        None,
        description='The last updated time of the managed configuration settings in milliseconds since 1970-01-01T00:00:00Z.',
    )
    mcmId: Optional[str] = Field(
        None, description='The ID of the managed configurations settings.'
    )
    name: Optional[str] = Field(
        None, description='The name of the managed configurations settings.'
    )


class ManagedConfigurationsSettingsListResponse(BaseModel):
    managedConfigurationsSettings: Optional[List[ManagedConfigurationsSettings]] = (
        Field(
            None,
            description='A managed configurations settings for an app that may be assigned to a group of users in an enterprise.',
        )
    )


class ManagementType1(Enum):
    managedDevice = 'managedDevice'
    managedProfile = 'managedProfile'


class NewDeviceEvent(BaseModel):
    deviceId: Optional[str] = Field(
        None,
        description='The Android ID of the device. This field will always be present.',
    )
    dpcPackageName: Optional[str] = Field(None, description='Policy app on the device.')
    managementType: Optional[ManagementType1] = Field(
        None,
        description='Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations. Possible values include: - "managedDevice", a device where the DPC is set as device owner, - "managedProfile", a device where the DPC is set as profile owner. ',
    )
    userId: Optional[str] = Field(
        None, description='The ID of the user. This field will always be present.'
    )


class NewPermissionsEvent(BaseModel):
    approvedPermissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions that the enterprise admin has already approved for this application. Use Permissions.Get on the EMM API to retrieve details about these permissions.',
    )
    productId: Optional[str] = Field(
        None,
        description='The id of the product (e.g. "app:com.google.android.gm") for which new permissions were added. This field will always be present.',
    )
    requestedPermissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions that the app is currently requesting. Use Permissions.Get on the EMM API to retrieve details about these permissions.',
    )


class NotificationType(Enum):
    unknown = 'unknown'
    testNotification = 'testNotification'
    productApproval = 'productApproval'
    installFailure = 'installFailure'
    appUpdate = 'appUpdate'
    newPermissions = 'newPermissions'
    appRestricionsSchemaChange = 'appRestricionsSchemaChange'
    productAvailabilityChange = 'productAvailabilityChange'
    newDevice = 'newDevice'
    deviceReportUpdate = 'deviceReportUpdate'


class PageInfo(BaseModel):
    resultPerPage: Optional[int] = Field(
        None,
        description='Maximum number of results returned in one page. ! The number of results included in the API response.',
    )
    startIndex: Optional[int] = Field(
        None, description='Index of the first result returned in the current page.'
    )
    totalResults: Optional[int] = Field(
        None,
        description='Total number of results available on the backend ! The total number of results in the result set.',
    )


class Permission(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A longer description of the Permissions resource, giving more details of what it affects.',
    )
    name: Optional[str] = Field(None, description='The name of the permission.')
    permissionId: Optional[str] = Field(
        None, description='An opaque string uniquely identifying the permission.'
    )


class AutoUpdatePolicy(Enum):
    autoUpdatePolicyUnspecified = 'autoUpdatePolicyUnspecified'
    choiceToTheUser = 'choiceToTheUser'
    never = 'never'
    wifiOnly = 'wifiOnly'
    always = 'always'


class DeviceReportPolicy(Enum):
    deviceReportPolicyUnspecified = 'deviceReportPolicyUnspecified'
    deviceReportDisabled = 'deviceReportDisabled'
    deviceReportEnabled = 'deviceReportEnabled'


class ProductAvailabilityPolicy(Enum):
    productAvailabilityPolicyUnspecified = 'productAvailabilityPolicyUnspecified'
    whitelist = 'whitelist'
    all = 'all'


class AvailableTrack(Enum):
    appTrackUnspecified = 'appTrackUnspecified'
    production = 'production'
    beta = 'beta'
    alpha = 'alpha'


class ContentRating(Enum):
    ratingUnknown = 'ratingUnknown'
    all = 'all'
    preTeen = 'preTeen'
    teen = 'teen'
    mature = 'mature'


class DistributionChannel(Enum):
    publicGoogleHosted = 'publicGoogleHosted'
    privateGoogleHosted = 'privateGoogleHosted'
    privateSelfHosted = 'privateSelfHosted'


class Feature(Enum):
    featureUnknown = 'featureUnknown'
    vpnApp = 'vpnApp'


class ProductPricing(Enum):
    unknown = 'unknown'
    free = 'free'
    freeWithInAppPurchase = 'freeWithInAppPurchase'
    paid = 'paid'


class Approved(Enum):
    unknown = 'unknown'
    approved = 'approved'
    unapproved = 'unapproved'


class ProductApprovalEvent(BaseModel):
    approved: Optional[Approved] = Field(
        None,
        description='Whether the product was approved or unapproved. This field will always be present.',
    )
    productId: Optional[str] = Field(
        None,
        description='The id of the product (e.g. "app:com.google.android.gm") for which the approval status has changed. This field will always be present.',
    )


class AvailabilityStatus(Enum):
    unknown = 'unknown'
    available = 'available'
    removed = 'removed'
    unpublished = 'unpublished'


class ProductAvailabilityChangeEvent(BaseModel):
    availabilityStatus: Optional[AvailabilityStatus] = Field(
        None,
        description='The new state of the product. This field will always be present.',
    )
    productId: Optional[str] = Field(
        None,
        description='The id of the product (e.g. "app:com.google.android.gm") for which the product availability changed. This field will always be present.',
    )


class State(Enum):
    required = 'required'
    accepted = 'accepted'


class ProductPermission(BaseModel):
    permissionId: Optional[str] = Field(
        None, description='An opaque string uniquely identifying the permission.'
    )
    state: Optional[State] = Field(
        None, description='Whether the permission has been accepted or not.'
    )


class ProductPermissions(BaseModel):
    permission: Optional[List[ProductPermission]] = Field(
        None, description='The permissions required by the app.'
    )
    productId: Optional[str] = Field(
        None,
        description='The ID of the app that the permissions relate to, e.g. "app:com.google.android.gm".',
    )


class AutoUpdateMode(Enum):
    autoUpdateModeUnspecified = 'autoUpdateModeUnspecified'
    autoUpdateDefault = 'autoUpdateDefault'
    autoUpdatePostponed = 'autoUpdatePostponed'
    autoUpdateHighPriority = 'autoUpdateHighPriority'


class ProductSetBehavior(Enum):
    unknown = 'unknown'
    whitelist = 'whitelist'
    includeAll = 'includeAll'
    allApproved = 'allApproved'


class ProductSigningCertificate(BaseModel):
    certificateHashSha1: Optional[str] = Field(
        None,
        description='The base64 urlsafe encoded SHA1 hash of the certificate. (This field is deprecated in favor of SHA2-256. It should not be used and may be removed at any time.)',
    )
    certificateHashSha256: Optional[str] = Field(
        None, description='The base64 urlsafe encoded SHA2-256 hash of the certificate.'
    )


class ProductVisibility(BaseModel):
    productId: Optional[str] = Field(
        None,
        description='The product ID to make visible to the user. Required for each item in the productVisibility list.',
    )
    trackIds: Optional[List[str]] = Field(
        None,
        description='Grants the user visibility to the specified product track(s), identified by trackIds.',
    )
    tracks: Optional[List[Track]] = Field(
        None, description='Deprecated. Use trackIds instead.'
    )


class ApprovedPermissions(Enum):
    currentPermissionsOnly = 'currentPermissionsOnly'
    allPermissions = 'allPermissions'


class ProductsApproveRequest(BaseModel):
    approvalUrlInfo: Optional[ApprovalUrlInfo] = Field(
        None,
        description="The approval URL that was shown to the user. Only the permissions shown to the user with that URL will be accepted, which may not be the product's entire set of permissions. For example, the URL may only display new permissions from an update after the product was approved, or not include new permissions if the product was updated since the URL was generated.",
    )
    approvedPermissions: Optional[ApprovedPermissions] = Field(
        None,
        description='Sets how new permission requests for the product are handled. "allPermissions" automatically approves all current and future permissions for the product. "currentPermissionsOnly" approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.',
    )


class ProductsGenerateApprovalUrlResponse(BaseModel):
    url: Optional[str] = Field(
        None,
        description='A URL that can be rendered in an iframe to display the permissions (if any) of a product. This URL can be used to approve the product only once and only within 24 hours of being generated, using the Products.approve call. If the product is currently unapproved and has no permissions, this URL will point to an empty page. If the product is currently approved, a URL will only be generated if that product has added permissions since it was last approved, and the URL will only display those new permissions that have not yet been accepted.',
    )


class Type1(Enum):
    googleCredentials = 'googleCredentials'
    pkcs12 = 'pkcs12'


class ServiceAccountKey(BaseModel):
    data: Optional[str] = Field(
        None,
        description='The body of the private key credentials file, in string format. This is only populated when the ServiceAccountKey is created, and is not stored by Google.',
    )
    id: Optional[str] = Field(
        None,
        description='An opaque, unique identifier for this ServiceAccountKey. Assigned by the server.',
    )
    publicData: Optional[str] = Field(
        None,
        description='Public key data for the credentials file. This is an X.509 cert. If you are using the googleCredentials key type, this is identical to the cert that can be retrieved by using the X.509 cert url inside of the credentials file.',
    )
    type: Optional[Type1] = Field(
        None, description='The file format of the generated key data.'
    )


class ServiceAccountKeysListResponse(BaseModel):
    serviceAccountKey: Optional[List[ServiceAccountKey]] = Field(
        None, description='The service account credentials.'
    )


class SignupInfo(BaseModel):
    completionToken: Optional[str] = Field(
        None,
        description='An opaque token that will be required, along with the Enterprise Token, for obtaining the enterprise resource from CompleteSignup.',
    )
    kind: Optional[str] = Field(None, description='Deprecated.')
    url: Optional[str] = Field(
        None,
        description='A URL under which the Admin can sign up for an enterprise. The page pointed to cannot be rendered in an iframe.',
    )


class StoreCluster(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique ID of this cluster. Assigned by the server. Immutable once assigned.',
    )
    name: Optional[List[LocalizedText]] = Field(
        None,
        description='Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.',
    )
    orderInPage: Optional[str] = Field(
        None,
        description="String (US-ASCII only) used to determine order of this cluster within the parent page's elements. Page elements are sorted in lexicographic order of this field. Duplicated values are allowed, but ordering between elements with duplicate order is undefined. The value of this field is never visible to a user, it is used solely for the purpose of defining an ordering. Maximum length is 256 characters.",
    )
    productId: Optional[List[str]] = Field(
        None,
        description='List of products in the order they are displayed in the cluster. There should not be duplicates within a cluster.',
    )


class StoreLayoutType(Enum):
    unknown = 'unknown'
    basic = 'basic'
    custom = 'custom'


class StoreLayout(BaseModel):
    homepageId: Optional[str] = Field(
        None,
        description='The ID of the store page to be used as the homepage. The homepage is the first page shown in the managed Google Play Store. Not specifying a homepage is equivalent to setting the store layout type to "basic".',
    )
    storeLayoutType: Optional[StoreLayoutType] = Field(
        None,
        description='The store layout type. By default, this value is set to "basic" if the homepageId field is not set, and to "custom" otherwise. If set to "basic", the layout will consist of all approved apps that have been whitelisted for the user.',
    )


class StoreLayoutClustersListResponse(BaseModel):
    cluster: Optional[List[StoreCluster]] = Field(
        None, description='A store cluster of an enterprise.'
    )


class StorePage(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique ID of this page. Assigned by the server. Immutable once assigned.',
    )
    link: Optional[List[str]] = Field(
        None,
        description="Ordered list of pages a user should be able to reach from this page. The list can't include this page. It is recommended that the basic pages are created first, before adding the links between pages. The API doesn't verify that the pages exist or the pages are reachable.",
    )
    name: Optional[List[LocalizedText]] = Field(
        None,
        description='Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.',
    )


class TokenPagination(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description="Tokens to pass to the standard list field 'page_token'. Whenever available, tokens are preferred over manipulating start_index.",
    )
    previousPageToken: Optional[str] = None


class TrackInfo(BaseModel):
    trackAlias: Optional[str] = Field(
        None,
        description='A modifiable name for a track. This is the visible name in the play developer console.',
    )
    trackId: Optional[str] = Field(
        None,
        description='Unmodifiable, unique track identifier. This identifier is the releaseTrackId in the url of the play developer console page that displays the track information.',
    )


class AccountType(Enum):
    deviceAccount = 'deviceAccount'
    userAccount = 'userAccount'


class ManagementType2(Enum):
    googleManaged = 'googleManaged'
    emmManaged = 'emmManaged'


class User(BaseModel):
    accountIdentifier: Optional[str] = Field(
        None,
        description='A unique identifier you create for this user, such as "user342" or "asset#44418". Do not use personally identifiable information (PII) for this property. Must always be set for EMM-managed users. Not set for Google-managed users.',
    )
    accountType: Optional[AccountType] = Field(
        None,
        description='The type of account that this user represents. A userAccount can be installed on multiple devices, but a deviceAccount is specific to a single device. An EMM-managed user (emmManaged) can be either type (userAccount, deviceAccount), but a Google-managed user (googleManaged) is always a userAccount.',
    )
    displayName: Optional[str] = Field(
        None,
        description='The name that will appear in user interfaces. Setting this property is optional when creating EMM-managed users. If you do set this property, use something generic about the organization (such as "Example, Inc.") or your name (as EMM). Not used for Google-managed user accounts. @mutable androidenterprise.users.update',
    )
    id: Optional[str] = Field(None, description='The unique ID for the user.')
    managementType: Optional[ManagementType2] = Field(
        None,
        description='The entity that manages the user. With googleManaged users, the source of truth is Google so EMMs have to make sure a Google Account exists for the user. With emmManaged users, the EMM is in charge.',
    )
    primaryEmail: Optional[str] = Field(
        None,
        description='The user\'s primary email address, for example, "jsmith@example.com". Will always be set for Google managed users and not set for EMM managed users.',
    )


class UsersListResponse(BaseModel):
    user: Optional[List[User]] = Field(None, description='A user of an enterprise.')


class VariableSet(BaseModel):
    placeholder: Optional[str] = Field(
        None, description='The placeholder string; defined by EMM.'
    )
    userValue: Optional[str] = Field(
        None, description='The value of the placeholder, specific to the user.'
    )


class DisplayMode(Enum):
    displayModeUnspecified = 'displayModeUnspecified'
    minimalUi = 'minimalUi'
    standalone = 'standalone'
    fullScreen = 'fullScreen'


class WebAppIcon(BaseModel):
    imageData: Optional[str] = Field(
        None,
        description='The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 "Base 64 Encoding with URL and Filename Safe Alphabet"). - The image type can be png or jpg. - The image should ideally be square. - The image should ideally have a size of 512x512. ',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class RequestMode(Enum):
    waitForNotifications = 'waitForNotifications'
    returnImmediately = 'returnImmediately'


class DeviceType(Enum):
    unknown = 'unknown'
    dedicatedDevice = 'dedicatedDevice'
    knowledgeWorker = 'knowledgeWorker'


class KeyType(Enum):
    googleCredentials = 'googleCredentials'
    pkcs12 = 'pkcs12'


class AdministratorWebTokenSpec(BaseModel):
    managedConfigurations: Optional[AdministratorWebTokenSpecManagedConfigurations] = (
        Field(
            None, description='Options for displaying the Managed Configuration page.'
        )
    )
    parent: Optional[str] = Field(
        None,
        description='The URI of the parent frame hosting the iframe. To prevent XSS, the iframe may not be hosted at other URIs. This URI must be https. Use whitespaces to separate multiple parent URIs.',
    )
    permission: Optional[List[PermissionEnum]] = Field(
        None, description='Deprecated. Use PlaySearch.approveApps.'
    )
    playSearch: Optional[AdministratorWebTokenSpecPlaySearch] = Field(
        None, description='Options for displaying the managed Play Search apps page.'
    )
    privateApps: Optional[AdministratorWebTokenSpecPrivateApps] = Field(
        None, description='Options for displaying the Private Apps page.'
    )
    storeBuilder: Optional[AdministratorWebTokenSpecStoreBuilder] = Field(
        None, description='Options for displaying the Organize apps page.'
    )
    webApps: Optional[AdministratorWebTokenSpecWebApps] = Field(
        None, description='Options for displaying the Web Apps page.'
    )
    zeroTouch: Optional[AdministratorWebTokenSpecZeroTouch] = Field(
        None, description='Options for displaying the Zero Touch page.'
    )


class AppRestrictionsSchemaRestriction(BaseModel):
    defaultValue: Optional[AppRestrictionsSchemaRestrictionRestrictionValue] = Field(
        None,
        description='The default value of the restriction. bundle and bundleArray restrictions never have a default value.',
    )
    description: Optional[str] = Field(
        None,
        description='A longer description of the restriction, giving more detail of what it affects.',
    )
    entry: Optional[List[str]] = Field(
        None,
        description="For choice or multiselect restrictions, the list of possible entries' human-readable names.",
    )
    entryValue: Optional[List[str]] = Field(
        None,
        description="For choice or multiselect restrictions, the list of possible entries' machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction.",
    )
    key: Optional[str] = Field(
        None,
        description='The unique key that the product uses to identify the restriction, e.g. "com.google.android.gm.fieldname".',
    )
    nestedRestriction: Optional[List[AppRestrictionsSchemaRestriction]] = Field(
        None,
        description='For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep.',
    )
    restrictionType: Optional[RestrictionType] = Field(
        None, description='The type of the restriction.'
    )
    title: Optional[str] = Field(None, description='The name of the restriction.')


class AppState(BaseModel):
    keyedAppState: Optional[List[KeyedAppState]] = Field(
        None, description='List of keyed app states. This field will always be present.'
    )
    packageName: Optional[str] = Field(
        None,
        description='The package name of the app. This field will always be present.',
    )


class ConfigurationVariables(BaseModel):
    mcmId: Optional[str] = Field(
        None, description='The ID of the managed configurations settings.'
    )
    variableSet: Optional[List[VariableSet]] = Field(
        None, description='The variable set that is attributed to the user.'
    )


class DeviceReport(BaseModel):
    appState: Optional[List[AppState]] = Field(
        None,
        description="List of app states set by managed apps on the device. App states are defined by the app's developers. This field will always be present.",
    )
    lastUpdatedTimestampMillis: Optional[str] = Field(
        None,
        description='The timestamp of the last report update in milliseconds since epoch. This field will always be present.',
    )


class DeviceReportUpdateEvent(BaseModel):
    deviceId: Optional[str] = Field(
        None,
        description='The Android ID of the device. This field will always be present.',
    )
    report: Optional[DeviceReport] = Field(
        None,
        description='The device report updated with the latest app states. This field will always be present.',
    )
    userId: Optional[str] = Field(
        None, description='The ID of the user. This field will always be present.'
    )


class Enterprise(BaseModel):
    administrator: Optional[List[Administrator]] = Field(
        None,
        description='Admins of the enterprise. This is only supported for enterprises created via the EMM-initiated flow.',
    )
    googleAuthenticationSettings: Optional[GoogleAuthenticationSettings] = Field(
        None,
        description='Output only. Settings for Google-provided user authentication.',
    )
    id: Optional[str] = Field(None, description='The unique ID for the enterprise.')
    name: Optional[str] = Field(
        None, description='The name of the enterprise, for example, "Example, Inc".'
    )
    primaryDomain: Optional[str] = Field(
        None, description='The enterprise\'s primary domain, such as "example.com".'
    )


class EnterprisesListResponse(BaseModel):
    enterprise: Optional[List[Enterprise]] = Field(None, description='An enterprise.')


class GroupLicenseUsersListResponse(BaseModel):
    user: Optional[List[User]] = Field(None, description='A user of an enterprise.')


class Notification(BaseModel):
    appRestrictionsSchemaChangeEvent: Optional[AppRestrictionsSchemaChangeEvent] = (
        Field(
            None, description='Notifications about new app restrictions schema changes.'
        )
    )
    appUpdateEvent: Optional[AppUpdateEvent] = Field(
        None, description='Notifications about app updates.'
    )
    deviceReportUpdateEvent: Optional[DeviceReportUpdateEvent] = Field(
        None, description='Notifications about device report updates.'
    )
    enterpriseId: Optional[str] = Field(
        None,
        description='The ID of the enterprise for which the notification is sent. This will always be present.',
    )
    installFailureEvent: Optional[InstallFailureEvent] = Field(
        None, description='Notifications about an app installation failure.'
    )
    newDeviceEvent: Optional[NewDeviceEvent] = Field(
        None, description='Notifications about new devices.'
    )
    newPermissionsEvent: Optional[NewPermissionsEvent] = Field(
        None, description='Notifications about new app permissions.'
    )
    notificationType: Optional[NotificationType] = Field(
        None, description='Type of the notification.'
    )
    productApprovalEvent: Optional[ProductApprovalEvent] = Field(
        None, description="Notifications about changes to a product's approval status."
    )
    productAvailabilityChangeEvent: Optional[ProductAvailabilityChangeEvent] = Field(
        None, description='Notifications about product availability changes.'
    )
    timestampMillis: Optional[str] = Field(
        None,
        description='The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.',
    )


class NotificationSet(BaseModel):
    notification: Optional[List[Notification]] = Field(
        None,
        description='The notifications received, or empty if no notifications are present.',
    )
    notificationSetId: Optional[str] = Field(
        None,
        description='The notification set ID, required to mark the notification as received with the Enterprises.AcknowledgeNotification API. This will be omitted if no notifications are present.',
    )


class ProductSet(BaseModel):
    productId: Optional[List[str]] = Field(
        None, description='The list of product IDs making up the set of products.'
    )
    productSetBehavior: Optional[ProductSetBehavior] = Field(
        None,
        description='The interpretation of this product set. "unknown" should never be sent and is ignored if received. "whitelist" means that the user is entitled to access the product set. "includeAll" means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. "allApproved" means that the user is entitled to access all products that are approved for the enterprise. If the value is "allApproved" or "includeAll", the productId field is ignored. If no value is provided, it is interpreted as "whitelist" for backwards compatibility. Further "allApproved" or "includeAll" does not enable automatic visibility of "alpha" or "beta" tracks for Android app. Use ProductVisibility to enable "alpha" or "beta" tracks per user.',
    )
    productVisibility: Optional[List[ProductVisibility]] = Field(
        None,
        description="Additional list of product IDs making up the product set. Unlike the productID array, in this list It's possible to specify which tracks (alpha, beta, production) of a product are visible to the user. See ProductVisibility and its fields for more information. Specifying the same product ID both here and in the productId array is not allowed and it will result in an error.",
    )


class ServiceAccount(BaseModel):
    key: Optional[ServiceAccountKey] = Field(
        None,
        description='Credentials that can be used to authenticate as this ServiceAccount.',
    )
    name: Optional[str] = Field(
        None,
        description='The account name of the service account, in the form of an email address. Assigned by the server.',
    )


class StoreLayoutPagesListResponse(BaseModel):
    page: Optional[List[StorePage]] = Field(
        None, description='A store page of an enterprise.'
    )


class WebApp(BaseModel):
    displayMode: Optional[DisplayMode] = Field(
        None,
        description='The display mode of the web app. Possible values include: - "minimalUi", the device\'s status bar, navigation bar, the app\'s URL, and a refresh button are visible when the app is open. For HTTP URLs, you can only select this option. - "standalone", the device\'s status bar and navigation bar are visible when the app is open. - "fullScreen", the app opens in full screen mode, hiding the device\'s status and navigation bars. All browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area. ',
    )
    icons: Optional[List[WebAppIcon]] = Field(
        None,
        description='A list of icons representing this website. If absent, a default icon (for create) or the current icon (for update) will be used.',
    )
    isPublished: Optional[bool_aliased] = Field(
        None,
        description='A flag whether the app has been published to the Play store yet.',
    )
    startUrl: Optional[str] = Field(
        None,
        description='The start URL, i.e. the URL that should load when the user opens the application.',
    )
    title: Optional[str] = Field(
        None,
        description='The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).',
    )
    versionCode: Optional[str] = Field(
        None,
        description='The current version of the app. Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.',
    )
    webAppId: Optional[str] = Field(
        None,
        description='The ID of the application. A string of the form "app:<package name>" where the package name always starts with the prefix "com.google.enterprise.webapp." followed by a random id.',
    )


class WebAppsListResponse(BaseModel):
    webApp: Optional[List[WebApp]] = Field(
        None, description='The manifest describing a web app.'
    )


class AppRestrictionsSchema(BaseModel):
    kind: Optional[str] = Field(None, description='Deprecated.')
    restrictions: Optional[List[AppRestrictionsSchemaRestriction]] = Field(
        None, description='The set of restrictions that make up this schema.'
    )


class Product(BaseModel):
    appRestrictionsSchema: Optional[AppRestrictionsSchema] = Field(
        None, description='The app restriction schema'
    )
    appTracks: Optional[List[TrackInfo]] = Field(
        None, description='The tracks visible to the enterprise.'
    )
    appVersion: Optional[List[AppVersion]] = Field(
        None, description='App versions currently available for this product.'
    )
    authorName: Optional[str] = Field(
        None,
        description='The name of the author of the product (for example, the app developer).',
    )
    availableCountries: Optional[List[str]] = Field(
        None, description='The countries which this app is available in.'
    )
    availableTracks: Optional[List[AvailableTrack]] = Field(
        None, description='Deprecated, use appTracks instead.'
    )
    category: Optional[str] = Field(
        None, description='The app category (e.g. RACING, SOCIAL, etc.)'
    )
    contentRating: Optional[ContentRating] = Field(
        None, description='The content rating for this app.'
    )
    description: Optional[str] = Field(
        None, description='The localized promotional description, if available.'
    )
    detailsUrl: Optional[str] = Field(
        None,
        description='A link to the (consumer) Google Play details page for the product.',
    )
    distributionChannel: Optional[DistributionChannel] = Field(
        None,
        description='How and to whom the package is made available. The value publicGoogleHosted means that the package is available through the Play store and not restricted to a specific enterprise. The value privateGoogleHosted means that the package is a private app (restricted to an enterprise) but hosted by Google. The value privateSelfHosted means that the package is a private app (restricted to an enterprise) and is privately hosted.',
    )
    features: Optional[List[Feature]] = Field(
        None, description='Noteworthy features (if any) of this product.'
    )
    iconUrl: Optional[str] = Field(
        None,
        description='A link to an image that can be used as an icon for the product. This image is suitable for use at up to 512px x 512px.',
    )
    lastUpdatedTimestampMillis: Optional[str] = Field(
        None,
        description='The approximate time (within 7 days) the app was last published, expressed in milliseconds since epoch.',
    )
    minAndroidSdkVersion: Optional[int] = Field(
        None, description='The minimum Android SDK necessary to run the app.'
    )
    permissions: Optional[List[ProductPermission]] = Field(
        None, description='A list of permissions required by the app.'
    )
    productId: Optional[str] = Field(
        None,
        description='A string of the form *app:<package name>*. For example, app:com.google.android.gm represents the Gmail app.',
    )
    productPricing: Optional[ProductPricing] = Field(
        None,
        description='Whether this product is free, free with in-app purchases, or paid. If the pricing is unknown, this means the product is not generally available anymore (even though it might still be available to people who own it).',
    )
    recentChanges: Optional[str] = Field(
        None, description='A description of the recent changes made to the app.'
    )
    requiresContainerApp: Optional[bool_aliased] = Field(
        None, description='Deprecated.'
    )
    screenshotUrls: Optional[List[str]] = Field(
        None, description='A list of screenshot links representing the app.'
    )
    signingCertificate: Optional[ProductSigningCertificate] = Field(
        None, description='The certificate used to sign this product.'
    )
    smallIconUrl: Optional[str] = Field(
        None,
        description='A link to a smaller image that can be used as an icon for the product. This image is suitable for use at up to 128px x 128px.',
    )
    title: Optional[str] = Field(None, description='The name of the product.')
    workDetailsUrl: Optional[str] = Field(
        None,
        description='A link to the managed Google Play details page for the product, for use by an Enterprise admin.',
    )


class ProductsListResponse(BaseModel):
    pageInfo: Optional[PageInfo] = Field(
        None, description='General pagination information.'
    )
    product: Optional[List[Product]] = Field(
        None,
        description='Information about a product (e.g. an app) in the Google Play store, for display to an enterprise admin.',
    )
    tokenPagination: Optional[TokenPagination] = Field(
        None, description='Pagination information for token pagination.'
    )


class Device(BaseModel):
    androidId: Optional[str] = Field(
        None,
        description='The Google Play Services Android ID for the device encoded as a lowercase hex string. For example, "123456789abcdef0".',
    )
    device: Optional[str] = Field(
        None,
        description='The internal hardware codename of the device. This comes from android.os.Build.DEVICE. (field named "device" per logs/wireless/android/android_checkin.proto)',
    )
    latestBuildFingerprint: Optional[str] = Field(
        None, description='The build fingerprint of the device if known.'
    )
    maker: Optional[str] = Field(
        None,
        description='The manufacturer of the device. This comes from android.os.Build.MANUFACTURER.',
    )
    managementType: Optional[ManagementType] = Field(
        None,
        description='Identifies the extent to which the device is controlled by a managed Google Play EMM in various deployment configurations. Possible values include: - "managedDevice", a device that has the EMM\'s device policy controller (DPC) as the device owner. - "managedProfile", a device that has a profile managed by the DPC (DPC is profile owner) in addition to a separate, personal profile that is unavailable to the DPC. - "containerApp", no longer used (deprecated). - "unmanagedProfile", a device that has been allowed (by the domain\'s admin, using the Admin Console to enable the privilege) to use managed Google Play, but the profile is itself not owned by a DPC. ',
    )
    model: Optional[str] = Field(
        None,
        description='The model name of the device. This comes from android.os.Build.MODEL.',
    )
    policy: Optional[Policy] = Field(
        None, description='The policy enforced on the device.'
    )
    product: Optional[str] = Field(
        None,
        description='The product name of the device. This comes from android.os.Build.PRODUCT.',
    )
    report: Optional[DeviceReport] = Field(
        None, description='The device report updated with the latest app states.'
    )
    retailBrand: Optional[str] = Field(
        None,
        description='Retail brand for the device, if set. See https://developer.android.com/reference/android/os/Build.html#BRAND',
    )
    sdkVersion: Optional[int] = Field(None, description='API compatibility version.')


class DevicesListResponse(BaseModel):
    device: Optional[List[Device]] = Field(None, description='A managed device.')


class ManagedConfiguration(BaseModel):
    configurationVariables: Optional[ConfigurationVariables] = Field(
        None,
        description='Contains the ID of the managed configuration profile and the set of configuration variables (if any) defined for the user.',
    )
    kind: Optional[str] = Field(None, description='Deprecated.')
    managedProperty: Optional[List[ManagedProperty]] = Field(
        None, description='The set of managed properties for this configuration.'
    )
    productId: Optional[str] = Field(
        None,
        description='The ID of the product that the managed configuration is for, e.g. "app:com.google.android.gm".',
    )


class ManagedConfigurationsForDeviceListResponse(BaseModel):
    managedConfigurationForDevice: Optional[List[ManagedConfiguration]] = Field(
        None, description='A managed configuration for an app on a specific device.'
    )


class ManagedConfigurationsForUserListResponse(BaseModel):
    managedConfigurationForUser: Optional[List[ManagedConfiguration]] = Field(
        None, description='A managed configuration for an app for a specific user.'
    )


class ManagedProperty(BaseModel):
    key: Optional[str] = Field(
        None, description='The unique key that identifies the property.'
    )
    valueBool: Optional[bool_aliased] = Field(
        None,
        description='The boolean value - this will only be present if type of the property is bool.',
    )
    valueBundle: Optional[ManagedPropertyBundle] = Field(
        None,
        description='The bundle of managed properties - this will only be present if type of the property is bundle.',
    )
    valueBundleArray: Optional[List[ManagedPropertyBundle]] = Field(
        None,
        description='The list of bundles of properties - this will only be present if type of the property is bundle_array.',
    )
    valueInteger: Optional[int] = Field(
        None,
        description='The integer value - this will only be present if type of the property is integer.',
    )
    valueString: Optional[str] = Field(
        None,
        description='The string value - this will only be present if type of the property is string, choice or hidden.',
    )
    valueStringArray: Optional[List[str]] = Field(
        None,
        description='The list of string values - this will only be present if type of the property is multiselect.',
    )


class ManagedPropertyBundle(BaseModel):
    managedProperty: Optional[List[ManagedProperty]] = Field(
        None, description='The list of managed properties.'
    )


class Policy(BaseModel):
    autoUpdatePolicy: Optional[AutoUpdatePolicy] = Field(
        None,
        description='Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect. "choiceToTheUser" allows the device\'s user to configure the app update policy. "always" enables auto updates. "never" disables auto updates. "wifiOnly" enables auto updates only when the device is connected to wifi.',
    )
    deviceReportPolicy: Optional[DeviceReportPolicy] = Field(
        None,
        description='Whether the device reports app states to the EMM. The default value is "deviceReportDisabled".',
    )
    maintenanceWindow: Optional[MaintenanceWindow] = Field(
        None,
        description='The maintenance window defining when apps running in the foreground should be updated.',
    )
    productAvailabilityPolicy: Optional[ProductAvailabilityPolicy] = Field(
        None,
        description='The availability granted to the device for the specified products. "all" gives the device access to all products, regardless of approval status. "all" does not enable automatic visibility of "alpha" or "beta" tracks. "whitelist" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.',
    )
    productPolicy: Optional[List[ProductPolicy]] = Field(
        None,
        description='The list of product policies. The productAvailabilityPolicy needs to be set to WHITELIST or ALL for the product policies to be applied.',
    )


class ProductPolicy(BaseModel):
    autoInstallPolicy: Optional[AutoInstallPolicy] = Field(
        None, description='The auto-install policy for the product.'
    )
    autoUpdateMode: Optional[AutoUpdateMode] = Field(
        None, description='The auto-update mode for the product.'
    )
    enterpriseAuthenticationAppLinkConfigs: Optional[
        List[EnterpriseAuthenticationAppLinkConfig]
    ] = Field(
        None,
        description="An authentication URL configuration for the authenticator app of an identity provider. This helps to launch the identity provider's authenticator app during the authentication happening in a private app using Android WebView. Authenticator app should already be the [default handler](https://developer.android.com/training/app-links/verify-site-associations) for the authentication url on the device.",
    )
    managedConfiguration: Optional[ManagedConfiguration] = Field(
        None, description='The managed configuration for the product.'
    )
    productId: Optional[str] = Field(
        None,
        description='The ID of the product. For example, "app:com.google.android.gm".',
    )
    trackIds: Optional[List[str]] = Field(
        None,
        description='Grants the device visibility to the specified product release track(s), identified by trackIds. The list of release tracks of a product can be obtained by calling Products.Get.',
    )
    tracks: Optional[List[Track]] = Field(
        None, description='Deprecated. Use trackIds instead.'
    )


AppRestrictionsSchemaRestriction.model_rebuild()
Device.model_rebuild()
ManagedConfiguration.model_rebuild()
ManagedProperty.model_rebuild()
Policy.model_rebuild()
